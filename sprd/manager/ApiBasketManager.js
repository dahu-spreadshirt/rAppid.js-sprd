define(["sprd/manager/IBasketManager", "flow", "sprd/model/Basket", "xaml!sprd/data/SprdApiDataSource", "js/data/LocalStorage"], function (IBasketManager, flow, Basket, SprdApiDataSource, LocalStorage) {

    /***
     * @summary A BasketManager to interact with the Spreadshirt Basket API
     *
     * @see http://developer.spreadshirt.net/display/API/Basket+Resources
     */
    return IBasketManager.inherit('sprd.manager.ApiBasketManager', {

        defaults: {
            /***
             * the basket model
             * @type {sprd.model.Basket}
             */
            basket: null,

            /***
             * the id of the api basket which should try to be loaded.
             * If the id isn't set the id is retrieved from the local storage or generated by the api
             * after the basket has been created successfully. The id is written back to this property.
             */
            apiBasketId: null,

            /***
             * the shop used for creating a new basket
             * @type {sprd.model.Shop}
             */
            shop: null,

            /***
             * continueShopping link is used in checkout as link for continue shopping button.
             * It will be automatically added to the element added to basket
             * @type String
             */
            continueShoppingLink: null,

            /***
             * edit link is the link displayed in checkout for editing the basket item.
             * It will be automatically added to the element added to the basked.
             *
             * The following values are replaced
             *
             *  + ${productId} - with the current productId
             *
             * @type String
             */
            editBasketItemLinkTemplate: null
        },

        events: [
        /***
         * the basketChanged event is dispatched after the basket has been modified e.g. added, removed or updated an
         * BasketItem
         */
            "on:basketChanged"
        ],

        inject: {
            api: SprdApiDataSource,
            localStorage: LocalStorage
        },

        addElementToBasket: function (element, quantity, callback) {

            var self = this;

            if (this.$.basket) {
                var basketItem = this.$.basket.addElement(element, quantity);
                element = basketItem.$.element;


                var continueShoppingLink = this.$.continueShoppingLink;

                if (continueShoppingLink) {
                    element.set("continueShoppingLink", continueShoppingLink)
                }

                var editBasketItemLinkTemplate = this.$.editBasketItemLinkTemplate;
                if (editBasketItemLinkTemplate) {
                    element.set("editLink", editBasketItemLinkTemplate.replace("$productId", element.get("item.id")))
                }

                basketItem.save({
                    invalidatePageCache: false
                }, function(err) {
                    if (!err) {
                        self._triggerBasketChanged();
                    }

                    callback && callback(err);
                });
            }
        },

        _triggerBasketChanged: function() {
            this.trigger("on:basketChanged", this.$.basket, this);
        },

        _initBasket: function (callback) {

            var api = this.$.api,
                localStorage = this.$.localStorage,
                basketId = this.$.apiBasketId,
                basket,
                self = this;

            basketId = basketId || localStorage.getItem("basketId");

            basket = api.createEntity(Basket, basketId);

            this.set({
                basket: basket,
                apiBasketId: basketId
            });

            var basketSaveCallback = function (err) {
                if (!err) {
                    self.set("apiBasketId", basketId);
                    self.$.localStorage.setItem("basketId", basket.$.id);
                    self._triggerBasketChanged();
                } else {
                    console.warn(err);
                }

                callback(err);
            };

            if (basket.isNew()) {

                basket.set({
                    shop: this.$.shop,
                    currency: this.get("shop.currency")
                });

                basket.save(null, basketSaveCallback);
            } else {
                basket.fetch({
                    noCache: true,
                    fetchSubModels: ["currency"]
                }, function (err) {
                    if (err) {
                        // something went wrong
                        basket.set('id', undefined);
                        basket.save(null, basketSaveCallback);
                        console.warn(err)
                    } else {

                        self.set("shop", basket.$.shop);

                        flow()
                            .parEach(basket.$.basketItems.toArray(), function (item, cb) {
                                item.$.element.getProduct().fetch({
                                    fetchSubModels: ["productType"]
                                }, cb);
                            })
                            .exec(callback);
                    }
                });
            }
        },

        /**
         *
         * @param {sprd.model.BasketItem} basketItem
         */
        saveBasketItem: function (basketItem) {

            var self = this;

            this.$itemSaveTimeout && clearTimeout(this.$itemSaveTimeout);

            this.$itemSaveTimeout = setTimeout(function () {
                basketItem.save();
                self._triggerBasketChanged();
            }, 300);
        },

        /**
         *
         * @param {sprd.model.BasketItem} basketItem
         */
        removeBasketItem: function (basketItem) {
            basketItem.remove();
            this.$.basket.$.basketItems.remove(basketItem);
            this._triggerBasketChanged();
        }
    });

});